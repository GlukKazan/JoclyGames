QUnit.test( "Piece", function( assert ) {
  var man  = Model.Game.createPiece(0, Model.Board.mWho);
  var king = man.promote(1);
  var flip = king.flip();
  assert.equal( man.ToString(), "1/0", "Man Piece");
  assert.equal( king.ToString(), "1/1", "King Piece");
  assert.equal( flip.ToString(), "-1/1", "Flip");
  assert.equal( man.getValue(0), null, "Non existent value");
  var piece = man.setValue(0, true);
  assert.ok( piece !== man, "Non mutable pieces");
  assert.ok( piece.getValue(0) === true, "Existent value");
  piece = piece.setValue(0, false);
  assert.ok( piece.getValue(0) === false, "Reset value");
  var p = piece.setValue(0, false);
  assert.equal( piece, p, "Value not changed");
});

QUnit.test( "Design", function( assert ) {
  var design = Model.Game.getDesign();
  design.addDirection("w");
  design.addDirection("e");
  design.addDirection("s");
  design.addDirection("n");
  assert.equal( design.dirs.length, 4, "Directions");
  design.addPlayer(0, [1, 0, 3, 2]);
  design.addPlayer(JocGame.PLAYER_B, [0, 1, 3, 2]);
  assert.equal( design.players[0].length, 4, "Opposite");
  assert.equal( design.players[JocGame.PLAYER_B].length, 4, "Symmetry");
  design.addPosition("a2", [ 0, 1, 2,  0]);
  design.addPosition("b2", [-1, 0, 2,  0]);
  design.addPosition("a1", [ 0, 1, 0, -2]);
  design.addPosition("b1", [-1, 0, 0, -2]);
  var pos = 2;
  assert.equal( design.names.length,4, "Positions");
  assert.equal( Model.Game.posToString(pos), "a1", "Start position");
  pos = design.navigate(JocGame.PLAYER_A, pos, 3);
  assert.equal( Model.Game.posToString(pos), "a2", "Player A moving");
  pos = design.navigate(JocGame.PLAYER_B, pos, 3);
  assert.equal( Model.Game.posToString(pos), "a1", "Player B moving");
  pos = design.navigate(0, pos, 0);
  assert.equal( Model.Game.posToString(pos), "b1", "Opposite moving");
  pos = design.navigate(JocGame.PLAYER_A, pos, 1);
  assert.equal( pos, null, "No moving");
  design.addZone("promotion", JocGame.PLAYER_A, [0, 1]);
  design.addZone("promotion", JocGame.PLAYER_B, [2, 3]);
  assert.equal( design.zones.length, 1, "Zones");
  assert.ok( design.inZone(0, JocGame.PLAYER_A, 0) === true, "Player A promotion zone" );
  assert.ok( design.inZone(0, JocGame.PLAYER_B, 3) === true, "Player B promotion zone" );
  assert.ok( design.inZone(0, JocGame.PLAYER_A, 2) === false, "No promotion zone" );
  assert.equal( design.getAttribute(0, 0), null, "Non existent attribute");
  design.addAttribute(0, 0, false);
  assert.equal( design.getAttribute(0, 0), false, "Default value for attribute");
  Model.Game.design = undefined;
});

QUnit.test( "Move", function( assert ) {
  var design = Model.Game.getDesign();
  var move = new Model.Move.Init([]);
  assert.equal( move.ToString(), "", "Initial move");
  var man  = Model.Game.createPiece(0, Model.Board.mWho);
  design.addPosition("a", [ 0, 1]);
  design.addPosition("b", [-1, 0]);
  move.movePiece(0, 1, man);
  assert.equal( move.ToString(), "a - b", "Move piece");
  move = new Model.Move.Init(move);
  move.capturePiece(1);
  assert.equal( move.ToString(), "a - b x b", "Capture piece");
  var king = man.promote(1);
  move.createPiece(1, king);
  assert.equal( move.ToString(), "a - b x b = 1/1", "Create piece");
  Model.Game.design = undefined;
});

QUnit.test( "Template", function( assert ) {
  Model.Game.InitGame();
  var design = Model.Game.getDesign();
  var board  = Model.Board;
  board.Init(Model.Game);
  var move   = new Model.Move.Init([]);
  assert.equal( design.templates.length , 4, "Templates");
  assert.equal( design.modec , 1, "Priorities");
  var t0 = design.getTemplate(0);
  var t1 = design.getTemplate(1);
  var t2 = design.getTemplate(2);
  assert.ok( t0 !== t1, "Different templates" );
  assert.equal( t1.commands.length , 16, "Commands");
  assert.equal( t0.commands[1], t1.commands[1], "Equal commands");
  assert.ok( t0.commands[1] !== t0.commands[6], "Not equal commands");
  var g0 = Model.Game.createGen(t0, [1, 2]);
  g0.init(board, 0, move);
  assert.equal( (t0.commands[0])(g0), null, "Piece not found");
  var man = Model.Game.createPiece(0, Model.Board.mWho);
  board.setPiece(0, man);
  assert.equal( (t0.commands[0])(g0), 0, "FROM command executed");
  assert.equal( g0.piece, man, "... current piece is Man");
  assert.equal( g0.from, 0, "... from position a8");
  var g = Model.Game.createGen(t2, [0, 0, 0, 0, 0]);
  g.setParent(g0);
  assert.equal( (t2.commands[8])(g), 0, "IS_LASTF command executed");
  assert.equal( g.stack.pop(), true, "... is start position");
  assert.equal( (t0.commands[1])(g0), 0, "PARAM command executed");
  assert.equal( g0.stack.pop(), 1, "... PARAM value");
  assert.equal( (t0.commands[2])(g0), null, "Stack is empty");
  g0.stack.push(1);
  assert.equal( (t0.commands[2])(g0), 0, "NAVIGATE command executed");
  assert.equal( g0.cp, 1, "... current position changed");
  assert.equal( (t0.commands[3])(g0), 0, "IS_ENEMY? command executed");
  assert.equal( g0.stack.pop(), false, "... position is empty");
  assert.equal( (t0.commands[8])(g0), 0, "IS_EMPTY? command executed");
  assert.equal( g0.stack.pop(), true, "... position is empty");
  g0.stack.push(false);
  assert.equal( (t0.commands[4])(g0), null, "VERIFY failed");
  g0.stack.push(true);
  assert.equal( (t0.commands[4])(g0), 0, "VERIFY command executed");
  g0.cp = 0;
  assert.equal( (t0.commands[5])(g0), 0, "CAPTURE command executed");
  assert.equal( move.ToString(), "x a8", "... piece is captured");
  assert.equal( (t0.commands[10])(g0), 0, "IN_ZONE? command executed");
  assert.equal( g0.stack.pop(), true, "... promotion zone for A Player");
  assert.equal( (t0.commands[11])(g0), null, "Stack is empty");
  g0.stack.push(true);
  assert.equal( (t0.commands[11])(g0), 5, "IF then");
  g0.stack.push(false);
  assert.equal( (t0.commands[11])(g0), 0, "... and else");
  assert.equal( (t0.commands[12])(g0), 0, "FORK command executed");
  var fork = board.forks.pop();
  assert.equal( fork.cc, 3, "... fork jump");
  assert.equal( (t0.commands[19])(g0), 0, "MODE command executed");
  assert.equal( g0.mode, 2, "... notype mode");
  assert.equal( (t0.commands[16])(g0), 5, "JUMP command executed");
  assert.equal( (t0.commands[18])(g0), 0, "PROMOTE command executed");
  assert.equal( g0.piece.ToString(), "1/1", "... piece promoted");
  g0.cp = 1;
  assert.equal( (t0.commands[14])(g0), 0, "TO command executed");
  assert.ok( g0.from === undefined, "... no from position");
  assert.ok( g0.piece === undefined, "... and no piece");
  assert.equal( g.isLastTo(1), true, "... stop position");
  assert.equal( g.getPiece(0), null, "... from position is empty");
  assert.equal( g.getPiece(1).ToString(), "1/1", "... and King piece on TO position");
  assert.equal( (t0.commands[15])(g0), -2, "END command executed");
  var g1 = Model.Game.createGen(t1, [3]);
  g1.init(board, 0, move);
  assert.equal( (t1.commands[6])(g1), null, "Stack is empty");
  g1.stack.push(false);
  assert.equal( (t1.commands[6])(g1), 0, "NOT command executed");
  assert.equal( g1.stack.pop(), true, "... NOT command result");
  assert.equal( (t2.commands[24])(g), null, "Stack is empty");
  g.stack.push(2);
  assert.equal( (t2.commands[24])(g), 0, "OPPOSITE command executed");
  assert.equal( g.stack.pop(), 3, "... opposite direction on stack");
  assert.equal( (t2.commands[19])(g), 0, "MARK command executed");
  assert.equal( g.mark, g.cp, "... mark position assigned");
  g.cp = 1;
  assert.ok( g.mark !== g.cp, "Current position is changed");
  assert.equal( (t2.commands[28])(g), 0, "BACK command executed");
  assert.equal( g.mark, g.cp, "... mark equal current position again");
  Model.Game.design = undefined;
});

QUnit.test( "Move Generator", function( assert ) {
  Model.Game.InitGame();
  var design = Model.Game.getDesign();
  var board  = Model.Board;
  board.Init(Model.Game);
  var t = design.getTemplate(1);
  var from = Model.Game.stringToPos("b2");
  assert.ok( from !== null, "Correct position");
  assert.equal( Model.Game.posToString(from), "b2", "From position");
  var m = new Model.Move.Init([]);
  var g = Model.Game.createGen(t, [3]);
  g.init(board, from, m);
  var man = Model.Game.createPiece(0, Model.Board.mWho);
  board.setPiece(from, man);
  var to = design.navigate(JocGame.PLAYER_A, from, 3);
  assert.equal( Model.Game.posToString(to), "b3", "To position");
  g.setPiece(from, null);
  g.setPiece(to, man);
  assert.equal( g.getPiece(from), man, "Man in [from] position (snapshot)");
  assert.equal( g.getPiece(to), null, "And [to] position is empty");
  var c = Model.Game.createGen(t, [3]);
  c.setParent(g);
  assert.equal( c.getPiece(from), null, "[from] position is empty");
  assert.equal( c.getPiece(to), man, "[to] position contains Man");
  assert.equal( g.getValue(0, from), null, "No value");
  g.setValue(0, from, true);
  assert.equal( g.getValue(0, from), true, "Position flag");
  assert.equal( c.getValue(0, from), null, "No value again");
  assert.equal( g.getAttr(0, from), null, "No attribute value");
  design.addAttribute(man.type, 0, false);
  assert.equal( g.getAttr(0, from), false, "Attribute's initial value");
  g.setAttr(0, to, true);
  assert.equal( g.attrs[to][0], true, "Attribute's value changed");
  g.setAttrsInternal();
  assert.equal( m.moves.length, 1, "Move are generated...");
  assert.equal( m.ToString(), "b3 = 1/0", "correct");
  var piece = m.moves[0][2];
  assert.ok( piece !== man, "Piece is changed");
  assert.equal( piece.getValue(0), true, "Attribute's value is assigned");
  Model.Game.design = undefined;
});

QUnit.test( "Board", function( assert ) {
  var board  = Model.Board;
  board.Init(Model.Game);
  assert.equal( board.getPiece(0), null, "No piece");
  var man  = Model.Game.createPiece(0, Model.Board.mWho);
  var king = man.promote(1);
  board.setPiece(0, man);
  board.setPiece(1, king);
  assert.equal( board.getPiece(0).ToString(), "1/0", "Man piece");
  assert.equal( board.getPiece(1).ToString(), "1/1", "King piece");
  board.setPiece(1, null);
  assert.equal( board.getPiece(1), null, "No piece ... again");
  assert.equal( board.getValue(0, 0), false, "No value");
  board.setValue(0, 0, true);
  assert.equal( board.getValue(0, 0), true, "Value exists");
  board.addFork(null);
  assert.equal( board.forks.length, 1, "Is forked");
});
