QUnit.test( "Zobrist", function( assert ) {
  var zobrist = Model.Game.getZobristHash();
  var old = zobrist.update(0, 1, 1, 5);
  assert.ok( old !== 0, "One piece");
  var v = zobrist.update(old, -1, 5, 0);
  assert.ok( old !== v, "Two pieces");
  v = zobrist.update(v, 1, 1, 5);
  assert.equal( zobrist.update(0, -1, 5, 0), v, "One piece again");
  assert.equal( zobrist.update(v, -1, 5, 0), 0, "Zero pieces");
});

QUnit.test( "Piece", function( assert ) {
  var design = Model.Game.getDesign();
  design.addPlayer("White", []);
  design.addPlayer("Black", []);
  design.addPiece("Man", 0);
  design.addPiece("King", 1);
  var man  = Model.Game.createPiece(0, 1);
  assert.equal( man.toString(), "White Man", "White Man");
  var king = man.promote(1);
  assert.ok( king !== man, "Promoted Man");
  assert.equal( king.toString(), "White King", "White King");
  assert.equal( man.getValue(0), null, "Non existent value");
  var piece = man.setValue(0, true);
  assert.ok( piece !== man, "Non mutable pieces");
  assert.ok( piece.getValue(0) === true, "Existent value");
  piece = piece.setValue(0, false);
  assert.ok( piece.getValue(0) === false, "Reset value");
  var p = piece.setValue(0, false);
  assert.equal( piece, p, "Value not changed");
  Model.Game.design = undefined;
});

QUnit.test( "Design", function( assert ) {
  var design = Model.Game.getDesign();
  design.addDirection("w");
  design.addDirection("e");
  design.addDirection("s");
  design.addDirection("n");
  assert.equal( design.dirs.length, 4, "Directions");
  design.addPlayer("White", [1, 0, 3, 2]);
  design.addPlayer("Black", [0, 1, 3, 2]);
  assert.equal( design.players[0].length, 4, "Opposite");
  assert.equal( design.players[2].length, 4, "Symmetry");
  design.addPosition("a2", [ 0, 1, 2,  0]);
  design.addPosition("b2", [-1, 0, 2,  0]);
  design.addPosition("a1", [ 0, 1, 0, -2]);
  design.addPosition("b1", [-1, 0, 0, -2]);
  var pos = 2;
  assert.equal( design.names.length,4, "Positions");
  assert.equal( Model.Game.posToString(pos), "a1", "Start position");
  pos = design.navigate(1, pos, 3);
  assert.equal( Model.Game.posToString(pos), "a2", "Player A moving");
  pos = design.navigate(2, pos, 3);
  assert.equal( Model.Game.posToString(pos), "a1", "Player B moving");
  pos = design.navigate(0, pos, 0);
  assert.equal( Model.Game.posToString(pos), "b1", "Opposite moving");
  pos = design.navigate(1, pos, 1);
  assert.equal( pos, null, "No moving");
  design.addZone("promotion", 1, [0, 1]);
  design.addZone("promotion", 2, [2, 3]);
  assert.equal( design.zones.length, 1, "Zones");
  assert.ok( design.inZone(0, 1, 0) === true, "Player A promotion zone" );
  assert.ok( design.inZone(0, 2, 3) === true, "Player B promotion zone" );
  assert.ok( design.inZone(0, 1, 2) === false, "No promotion zone" );
  assert.equal( design.getAttribute(0, 0), null, "Non existent attribute");
  design.addAttribute(0, 0, false);
  assert.equal( design.getAttribute(0, 0), false, "Default value for attribute");
  Model.Game.design = undefined;
});

QUnit.test( "Move", function( assert ) {
  var design = Model.Game.getDesign();
  design.addPlayer("White", []);
  design.addPlayer("Black", []);
  design.addPiece("Man", 0);
  design.addPiece("King", 1);
  var move = Model.Game.createMove();
  assert.equal( move.toString(0), "Pass", "Initial move");
  var man  = Model.Game.createPiece(0, 1);
  design.addPosition("a", [ 0, 1]);
  design.addPosition("b", [-1, 0]);
  move.movePiece(0, 1, man);
  assert.equal( move.toString(0), "a - b", "Move piece");
  move = move.copy(move.template, move.params);
  move.capturePiece(1);
  assert.equal( move.toString(0), "a - b x b", "Capture piece");
  var king = man.promote(1);
  move.dropPiece(1, king);
  assert.equal( move.toString(0), "a - b x b = White King", "Create piece");
  Model.Game.design = undefined;
});

QUnit.test( "Template", function( assert ) {
  Model.Game.InitGame();
  var design = Model.Game.getDesign();
  assert.equal( design.checkOption("z2j", 1), true, "Z2J Version");
  assert.equal( design.checkOption("zrf", "2.0"), true, "ZRF Version");
  assert.equal( design.checkOption("maximal-captures", "true"), true, "Max Captures option");
  assert.equal( design.failed, false, "All options is valid");
  var board  = Model.Game.getInitBoard();
  var move   = new Model.Game.createMove();
  assert.equal( design.templates.length , 4, "Templates");
  assert.equal( design.modes.length, 2, "Priorities");
  var t0 = design.getTemplate(0);
  var t1 = design.getTemplate(1);
  var t2 = design.getTemplate(2);
  var t3 = design.getTemplate(3);
  assert.ok( t0 !== t1, "Different templates" );
  assert.equal( t1.commands.length , 13, "Commands");
  assert.equal( t0.commands[1], t1.commands[1], "Equal commands");
  assert.ok( t0.commands[1] !== t0.commands[6], "Not equal commands");
  var g0 = Model.Game.createGen(t0, [1, 2]);
  g0.init(board, 0);
  g0.move = move;
  assert.equal( (t0.commands[0])(g0), null, "Piece not found");
  var man = Model.Game.createPiece(0, 1);
  board.setPiece(0, man);
  assert.equal( (t0.commands[0])(g0), 0, "FROM command executed");
  assert.equal( g0.piece, man, "... current piece is Man");
  assert.equal( g0.from, 0, "... from position a8");
  var g = g0.copy(g0.template, g0.params);
  assert.equal( (t0.commands[1])(g0), 0, "PARAM command executed");
  assert.equal( g0.stack.pop(), 1, "... PARAM value");
  assert.equal( (t0.commands[2])(g0), null, "Stack is empty");
  g0.stack.push(1);
  assert.equal( (t0.commands[2])(g0), 0, "NAVIGATE command executed");
  assert.equal( g0.getPos(), 1, "... current position changed");
  assert.equal( (t0.commands[3])(g0), 0, "IS_ENEMY? command executed");
  assert.equal( g0.stack.pop(), false, "... position is empty");
  assert.equal( (t0.commands[8])(g0), 0, "IS_EMPTY? command executed");
  assert.equal( g0.stack.pop(), true, "... position is empty");
  g0.stack.push(false);
  assert.equal( (t0.commands[4])(g0), null, "VERIFY failed");
  g0.stack.push(true);
  assert.equal( (t0.commands[4])(g0), 0, "VERIFY command executed");
  g0.pos = 0;
  assert.equal( (t0.commands[5])(g0), 0, "CAPTURE command executed");
  assert.equal( move.toString(0), "x a8", "... piece is captured");
  assert.equal( (t0.commands[10])(g0), 0, "IN_ZONE? command executed");
  assert.equal( g0.stack.pop(), true, "... promotion zone for A Player");
  assert.equal( (t0.commands[11])(g0), null, "Stack is empty");
  g0.stack.push(true);
  assert.equal( (t0.commands[11])(g0), 3, "IF then");
  g0.stack.push(false);
  assert.equal( (t0.commands[11])(g0), 0, "... and else");
  assert.equal( (t3.commands[6])(g0), 0, "FORK command executed");
  var fork = board.forks.pop();
  assert.equal( fork.cmd, 2, "... fork jump");
  assert.equal( (t0.commands[16])(g0), 0, "MODE command executed");
  assert.equal( g0.mode, 2, "... notype mode");
  assert.equal( (t0.commands[14])(g0), 3, "JUMP command executed");
  assert.equal( (t0.commands[15])(g0), 0, "PROMOTE command executed");
  assert.equal( g0.piece.toString(), "White King", "... piece promoted");
  g0.pos = 1;
  assert.equal( (t0.commands[17])(g0), 0, "TO command executed");
  assert.ok( g0.from === undefined, "... no from position");
  assert.ok( g0.piece === undefined, "... and no piece");
  assert.equal( g.getPiece(0), null, "... from position is empty");
  assert.equal( g.getPiece(1).toString(), "White King", "... and King piece on TO position");
  assert.equal( (t3.commands[12])(g0), null, "END command executed");
  assert.equal( board.moves.length, 1, "Move is generated");
  var g1 = Model.Game.createGen(t1, [3]);
  g1.init(board, 0);
  g1.move = move;
  assert.equal( (t1.commands[6])(g1), null, "Stack is empty");
  g1.stack.push(false);
  assert.equal( (t1.commands[6])(g1), 0, "NOT command executed");
  assert.equal( g1.stack.pop(), true, "... NOT command result");
  assert.equal( (t2.commands[24])(g), null, "Stack is empty");
  g.stack.push(2);
  assert.equal( (t2.commands[24])(g), 0, "OPPOSITE command executed");
  assert.equal( g.stack.pop(), 3, "... opposite direction on stack");
  assert.equal( (t2.commands[19])(g), 0, "MARK command executed");
  var oldPos = g.pos;
  g.pos = 1;
  assert.equal( (t2.commands[28])(g), 0, "BACK command executed");
  assert.equal( oldPos, g.getPos(), "... mark equal current position again");
  Model.Game.design = undefined;
});

QUnit.test( "Move Generator", function( assert ) {
  Model.Game.InitGame();
  var design = Model.Game.getDesign();
  var board  = Model.Game.getInitBoard();
  board.clear();
  var t = design.getTemplate(1);
  var from = Model.Game.stringToPos("b2");
  assert.ok( from !== null, "Correct position");
  assert.equal( Model.Game.posToString(from), "b2", "From position");
  var m = new Model.Game.createMove();
  var g = Model.Game.createGen(t, [3]);
  g.init(board, from);
  g.move = m;
  var man = Model.Game.createPiece(0, 1);
  var king = man.promote(1);
  assert.equal( man.getType(), "Man", "Man piece");
  assert.equal( king.getType(), "King", "King piece");
  board.setPiece(from, man);
  var to = design.navigate(1, from, 3);
  assert.equal( Model.Game.posToString(to), "b3", "To position");
  g.setPiece(from, null);
  g.setPiece(to, man);
  assert.equal( g.getPiece(from), man, "Man in [from] position (snapshot)");
  assert.equal( g.getPiece(to), null, "And [to] position is empty");
  var c = g.copy(g.template, g.params);
  assert.equal( c.getPiece(from), null, "[from] position is empty");
  assert.equal( c.getPiece(to), man, "[to] position contains Man");
  assert.equal( g.getValue(0, from), null, "No value");
  g.setValue(0, from, true);
  assert.equal( g.getValue(0, from), true, "Position flag");
  assert.equal( c.getValue(0, from), null, "No value again");
  assert.equal( g.getAttr(0, from), null, "No attribute value");
  design.addAttribute(man.type, 0, false);
  assert.equal( g.getAttr(0, from), false, "Attribute's initial value");
  g.setAttr(0, to, true);
  assert.equal( g.attrs[to][0], true, "Attribute's value changed");
  Model.Game.design = undefined;
});
